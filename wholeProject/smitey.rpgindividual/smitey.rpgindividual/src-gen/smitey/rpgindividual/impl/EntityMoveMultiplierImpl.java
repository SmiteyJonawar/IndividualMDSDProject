/**
 * generated by Xtext 2.21.0
 */
package smitey.rpgindividual.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import smitey.rpgindividual.Attribute;
import smitey.rpgindividual.EntityMoveMultiplier;
import smitey.rpgindividual.RpgindividualPackage;
import smitey.rpgindividual.Sum;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity Move Multiplier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link smitey.rpgindividual.impl.EntityMoveMultiplierImpl#getAttribute <em>Attribute</em>}</li>
 *   <li>{@link smitey.rpgindividual.impl.EntityMoveMultiplierImpl#getMultiplier <em>Multiplier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityMoveMultiplierImpl extends MinimalEObjectImpl.Container implements EntityMoveMultiplier
{
  /**
   * The cached value of the '{@link #getAttribute() <em>Attribute</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected Attribute attribute;

  /**
   * The cached value of the '{@link #getMultiplier() <em>Multiplier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplier()
   * @generated
   * @ordered
   */
  protected Sum multiplier;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityMoveMultiplierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RpgindividualPackage.Literals.ENTITY_MOVE_MULTIPLIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getAttribute()
  {
    if (attribute != null && attribute.eIsProxy())
    {
      InternalEObject oldAttribute = (InternalEObject)attribute;
      attribute = (Attribute)eResolveProxy(oldAttribute);
      if (attribute != oldAttribute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE, oldAttribute, attribute));
      }
    }
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetAttribute()
  {
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttribute(Attribute newAttribute)
  {
    Attribute oldAttribute = attribute;
    attribute = newAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE, oldAttribute, attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sum getMultiplier()
  {
    return multiplier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplier(Sum newMultiplier, NotificationChain msgs)
  {
    Sum oldMultiplier = multiplier;
    multiplier = newMultiplier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER, oldMultiplier, newMultiplier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplier(Sum newMultiplier)
  {
    if (newMultiplier != multiplier)
    {
      NotificationChain msgs = null;
      if (multiplier != null)
        msgs = ((InternalEObject)multiplier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER, null, msgs);
      if (newMultiplier != null)
        msgs = ((InternalEObject)newMultiplier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER, null, msgs);
      msgs = basicSetMultiplier(newMultiplier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER, newMultiplier, newMultiplier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER:
        return basicSetMultiplier(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE:
        if (resolve) return getAttribute();
        return basicGetAttribute();
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER:
        return getMultiplier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE:
        setAttribute((Attribute)newValue);
        return;
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER:
        setMultiplier((Sum)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE:
        setAttribute((Attribute)null);
        return;
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER:
        setMultiplier((Sum)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__ATTRIBUTE:
        return attribute != null;
      case RpgindividualPackage.ENTITY_MOVE_MULTIPLIER__MULTIPLIER:
        return multiplier != null;
    }
    return super.eIsSet(featureID);
  }

} //EntityMoveMultiplierImpl
