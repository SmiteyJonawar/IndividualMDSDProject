/**
 * generated by Xtext 2.21.0
 */
package smitey.rpgindividual.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import smitey.rpgindividual.EntityMoveModifier;
import smitey.rpgindividual.EntityMoveMultiplier;
import smitey.rpgindividual.Move;
import smitey.rpgindividual.RpgindividualPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity Move Modifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link smitey.rpgindividual.impl.EntityMoveModifierImpl#getMoveName <em>Move Name</em>}</li>
 *   <li>{@link smitey.rpgindividual.impl.EntityMoveModifierImpl#getMoveModification <em>Move Modification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityMoveModifierImpl extends MinimalEObjectImpl.Container implements EntityMoveModifier
{
  /**
   * The cached value of the '{@link #getMoveName() <em>Move Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveName()
   * @generated
   * @ordered
   */
  protected Move moveName;

  /**
   * The cached value of the '{@link #getMoveModification() <em>Move Modification</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveModification()
   * @generated
   * @ordered
   */
  protected EList<EntityMoveMultiplier> moveModification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityMoveModifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RpgindividualPackage.Literals.ENTITY_MOVE_MODIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move getMoveName()
  {
    if (moveName != null && moveName.eIsProxy())
    {
      InternalEObject oldMoveName = (InternalEObject)moveName;
      moveName = (Move)eResolveProxy(oldMoveName);
      if (moveName != oldMoveName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME, oldMoveName, moveName));
      }
    }
    return moveName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Move basicGetMoveName()
  {
    return moveName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveName(Move newMoveName)
  {
    Move oldMoveName = moveName;
    moveName = newMoveName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME, oldMoveName, moveName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EntityMoveMultiplier> getMoveModification()
  {
    if (moveModification == null)
    {
      moveModification = new EObjectContainmentEList<EntityMoveMultiplier>(EntityMoveMultiplier.class, this, RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION);
    }
    return moveModification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION:
        return ((InternalEList<?>)getMoveModification()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME:
        if (resolve) return getMoveName();
        return basicGetMoveName();
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION:
        return getMoveModification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME:
        setMoveName((Move)newValue);
        return;
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION:
        getMoveModification().clear();
        getMoveModification().addAll((Collection<? extends EntityMoveMultiplier>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME:
        setMoveName((Move)null);
        return;
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION:
        getMoveModification().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_NAME:
        return moveName != null;
      case RpgindividualPackage.ENTITY_MOVE_MODIFIER__MOVE_MODIFICATION:
        return moveModification != null && !moveModification.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EntityMoveModifierImpl
